#include <stdio.h>
#include <limits.h>
#include <sstream>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <set>
#include <string>
#include <queue>
#include <iostream>
#include "Config.h"
#include "CodeGen_Bash.h"
#include "Parser.h"

// Return the path to the standard library. This allows setting the
// path via BISH_STDLIB to override the default.
std::string get_stdlib_path() {
    char *stdlib = std::getenv("BISH_STDLIB");
    if (stdlib) {
        char abspath[PATH_MAX];
        stdlib = realpath(stdlib, abspath);
        assert(stdlib && "Unable to resolve path specified in BISH_STDLIB.");
        return abspath;
    } else {
        return STDLIB_PATH;
    }
}

// Add necessary stdlib functions to the given module.
void link_stdlib(Bish::Module *m) {
    Bish::Parser p;
    Bish::Module *stdlib = p.parse(get_stdlib_path());
    m->import(stdlib);
}

void compile_to_bash(std::ostream &os, Bish::Module *m) {
    link_stdlib(m);
    os << "#!/usr/bin/env bash\n";
    os << "# Autogenerated script, compiled from the Bish language.\n";
    os << "# Bish version " << BISH_VERSION << "\n";
    os << "# Please see " << BISH_URL << " for more information about Bish.\n\n";
    Bish::CodeGen_Bash compile(os);
    m->accept(&compile);
}

void run_on_bash(std::istream &is) {
    FILE *bash = popen("bash", "w");
    char buf[4096];

    do {
        is.read(buf, sizeof(buf));
        fwrite(buf, 1, is.gcount(), bash);
    } while (is.gcount() > 0);

    fflush(bash);
    pclose(bash);
}

int main(int argc, char **argv) {
    if (argc < 2) {
        std::cerr << "USAGE: " << argv[0] << " [-r] <INPUT>\n";
        std::cerr << "  Compiles Bish file <INPUT> to bash.\n";
        std::cerr << "\nOPTIONS:\n";
        std::cerr << "  -r  compiles and runs the file.\n";
        return 1;
    }

    if (strcmp(argv[1], "-r") == 0) {
        if (argc != 3) {
            std::cerr << "-r needs a filename\n";
            return 1;
        }

        std::string path(argv[2]);
        Bish::Parser p;
        Bish::Module *m = p.parse(path);

        std::stringstream s;
        compile_to_bash(s, m);
        run_on_bash(s);
    } else {
        std::string path(argv[1]);
        Bish::Parser p;
        Bish::Module *m = p.parse(path);

        compile_to_bash(std::cout, m);
    }

    return 0;
}
